import { Component } from '@angular/core';
import { ToastController } from '@ionic/angular'; // –ò–º–ø–æ—Ä—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { environment } from '../../environments/environment';

// –¢–∏–ø –¥–ª—è —Ç–µ–º
interface Topic {
  text: string;
  icon: string;
}

@Component({
  selector: 'app-login',
  templateUrl: './login.page.html',
  styleUrls: ['./login.page.scss'],
})
export class LoginPage {
  username: string = '';
  password: string = '';
  progress: number = 0;

  // –ú–∞—Å—Å–∏–≤ —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  topics: Topic[] = [
    { text: '–ö–∞–∫ –ø—Ä–æ—à–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ? üèñÔ∏è', icon: 'sunny' },
    { text: '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –Ω–∞ —Ä–∞–±–æ—Ç–µ? üíº', icon: 'briefcase' },
    { text: '–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –Ω–µ–¥–∞–≤–Ω–æ —Å–º–æ—Ç—Ä–µ–ª–∏? üé•', icon: 'film' },
    { text: '–ü–ª–∞–Ω—ã –Ω–∞ –æ—Ç–ø—É—Å–∫? ‚úàÔ∏è', icon: 'airplane' },
    { text: '–õ—é–±–∏–º—ã–µ —Ö–æ–±–±–∏? üé®', icon: 'color-palette' },
    { text: '–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ —á–∏—Ç–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ? üìö', icon: 'book' },
    { text: '–ö–∞–∫–∞—è –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞? üéµ', icon: 'musical-notes' },
    { text: '–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö? ‚õ∑Ô∏è', icon: 'walk' },
    { text: '–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞? üçï', icon: 'pizza' },
  ];

  // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ randomTopics –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤–æ–º —Ç–∏–ø–∞ Topic
  randomTopics: Topic[] = [];

  constructor(
    private toastController: ToastController,
    private http: HttpClient,
    private router: Router
  ) {
    this.getRandomTopics();
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º
  getRandomTopics() {
    this.randomTopics = this.topics
      .sort(() => Math.random() - 0.5)  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
      .slice(0, 3);  // –í—ã–±–∏—Ä–∞–µ–º 3 —Ç–µ–º—ã
  }

  updateProgress() {
    const totalFields = 2;
    let filledFields = 0;

    if (this.username && this.username.length >= 3) filledFields++;
    if (this.password && this.password.length >= 6) filledFields++;

    this.progress = filledFields / totalFields;
  }

  formValid(): boolean {
    return this.username.length >= 3 && this.password.length >= 6;
  }

  async showToast(message: string, color: string = 'success') {
    const toast = await this.toastController.create({
      message: message,
      duration: 2000,
      color: color,
      position: 'top'
    });
    await toast.present();
  }

  login() {
    if (this.formValid()) {
      const data = {
        username: this.username,
        password: this.password
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      // this.http.post(`${environment.apiUrl}/login`, data).subscribe({
      //   next: (response: any) => {
      //     if (response.UUID) {
      //       // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ authToken –≤ localStorage
      //       localStorage.setItem('authToken', 'true');
      //
      //       // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
      //       this.showToast('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!');
      //
      //       // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–æ–≤
      //       this.router.navigate(['/chats']);
      //     } else {
      //       console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID');
      //       this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ!', 'danger');
      //     }
      //   },
      //   error: (error) => {
      //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      //     this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ!', 'danger');
      //   },
      // });

      if (data) {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ authToken –≤ localStorage
        localStorage.setItem('authToken', 'true');

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
        this.showToast('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!');

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–æ–≤
        this.router.navigate(['/chats']);
      } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID');
        this.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ!', 'danger');
      }

    }
  }
}
